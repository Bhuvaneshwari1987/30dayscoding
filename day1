You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.



#include <vector>
#include <iostream>

void merge(std::vector<int>& nums1, int m, std::vector<int>& nums2, int n) {
    // Start from the end of nums1 and nums2
    int i = m - 1; // Pointer for the last valid element in nums1
    int j = n - 1; // Pointer for the last element in nums2
    int k = m + n - 1; // Pointer for the last position in nums1

    // Merge the arrays starting from the back
    while (i >= 0 && j >= 0) {
        if (nums1[i] > nums2[j]) {
            nums1[k--] = nums1[i--];
        } else {
            nums1[k--] = nums2[j--];
        }
    }

    // If there are remaining elements in nums2, copy them
    while (j >= 0) {
        nums1[k--] = nums2[j--];
    }

    // No need to do anything for remaining nums1 elements,
    // because they are already in their correct positions.
}

int main() {
    std::vector<int> nums1 = {1, 2, 3, 0, 0, 0};  // nums1 with space for 3 more elements
    std::vector<int> nums2 = {2, 5, 6};           // nums2
    int m = 3; // Number of valid elements in nums1
    int n = 3; // Number of elements in nums2

    merge(nums1, m, nums2, n);  // Merge nums2 into nums1

    // Output the merged nums1
    for (int num : nums1) {
        std::cout << num << " ";  // Print merged array
    }
    std::cout << std::endl;

    return 0;
}
