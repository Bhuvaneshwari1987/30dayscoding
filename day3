Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1

code:-
#include <iostream>
#include <vector>
using namespace std;

int singleNumber(vector<int>& nums) {
    int result = 0;
    for (int num : nums) {
        result ^= num;
    }
    return result;
}

int main() {
    vector<int> nums1 = {2, 2, 1};
    cout << "Single number: " << singleNumber(nums1) << endl;  // Output: 1

    vector<int> nums2 = {4, 1, 2, 1, 2};
    cout << "Single number: " << singleNumber(nums2) << endl;  // Output: 4

    vector<int> nums3 = {1};
    cout << "Single number: " << singleNumber(nums3) << endl;  // Output: 1

    return 0;
}
