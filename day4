Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2

CODE:-
#include <vector>
#include <iostream>

using namespace std;

int majorityElement(vector<int>& nums) {
    int candidate = 0, count = 0;
    
    // Phase 1: Find the candidate for majority element
    for (int num : nums) {
        if (count == 0) {
            candidate = num;
        }
        count += (num == candidate) ? 1 : -1;
    }

    // Phase 2: Return the candidate as the majority element
    return candidate;
}

int main() {
    // Example 1
    vector<int> nums1 = {3, 2, 3};
    cout << "Majority element in nums1: " << majorityElement(nums1) << endl;  // Output: 3

    // Example 2
    vector<int> nums2 = {2, 2, 1, 1, 1, 2, 2};
    cout << "Majority element in nums2: " << majorityElement(nums2) << endl;  // Output: 2

    return 0;
}
